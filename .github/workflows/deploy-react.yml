name: Build and Deploy React App

on:
  push:
    branches:
      - main
  workflow_dispatch: # manual trigger

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
      IMAGE_VERSION: v1.0.0
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v2

      - uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME:$IMAGE_VERSION .
      
      - name: Save Docker image as tar
        run: |
          docker save $IMAGE_NAME:$IMAGE_VERSION -o react-app.tar
          
      - name: Push Docker image to registry
        run: |
          docker push $IMAGE_NAME:$IMAGE_VERSION

  copy_files_to_server:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: List files
        run: ls -l

      - uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ${{ secrets.SSH_KEY_PASSPHRASE }}
          source: |
            docker-compose.yml
            react-app.tar
          target: '~/e_receipt/react'

  deploy:
    needs: copy_files_to_server
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
      IMAGE_VERSION: v1.0.0
    steps:
      - uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ${{ secrets.SSH_KEY_PASSPHRASE }}
          script: |
            export IMAGE_NAME=$IMAGE_NAME
            export IMAGE_VERSION=$IMAGE_VERSION
            cd ~/e_receipt/react
            # Load local image if available
            if [ -f react-app.tar ]; then
              docker load -i react-app.tar
            fi
            # Pull from registry to make sure latest image is used
            docker compose pull
            # Start or update services
            # docker compose up -d --remove-orphans
